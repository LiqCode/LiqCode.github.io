<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LiqCode</title>
    <description>嗨，我是李球，13年开始从事iOS开发。现居深圳，正在修行中。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 17 May 2017 00:37:04 +0800</pubDate>
    <lastBuildDate>Wed, 17 May 2017 00:37:04 +0800</lastBuildDate>
    <generator>Jekyll v3.4.0</generator>
    
      <item>
        <title>内存管理</title>
        <description>&lt;p&gt;申明：本文由LiqCode原创，转载请声明出处。&lt;/p&gt;

&lt;h3 id=&quot;mrc和arc&quot;&gt;MRC和ARC&lt;/h3&gt;
&lt;p&gt;oc对象管理分2个时代，一个是MRC，另一个是ARC。
&lt;strong&gt;MRC时代&lt;/strong&gt; 采用引用计数的方式，管理OC对象，需要手动释放oc对象，想想当初写代码多麻烦，很容易就写错。
只记得一句非常经典的话，&lt;strong&gt;谁创建谁释放&lt;/strong&gt;，包括retain,copy, alloc, new。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ARC时代&lt;/strong&gt; 记得当时苹果发布ARC时有多兴奋，不在需要管OC创建释放，开发速度瞬间提升。但这些都取决于编译器的功劳，OC底层并没有发生变化，依然是引用计数，只是在编译的时候，编译器帮我们加上retain, release。&lt;/p&gt;

&lt;h3 id=&quot;autoreleasepool&quot;&gt;AutoReleasePool&lt;/h3&gt;
&lt;p&gt;当我们创建xcode给我们提供的模板工程的时候，你会发现在main，有一个@autoreleasepool,这就是自动释放池。用于当大量创建临时变量时，及时释放内存。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;autoreleasepool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIApplicationMain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSStringFromClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AppDelegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;ps：&lt;strong&gt;整个 iOS 的应用都是包含在一个自动释放池 block 中的&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;疑问&lt;/strong&gt;：测试不使用自动释放池，循环创建临时的NSString变量，内存没有什么印象（与使用自动释放池一样），代码如下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for (NSInteger i = 0; i &amp;lt; 1000000000; i++) {
        @autoreleasepool {
            NSString *string = @&quot;Abc&quot;;
            string = [string lowercaseString];
            string = [string stringByAppendingString:@(i).stringValue];

//            UIView *v = [[UIView alloc] initWithFrame:self.view.bounds]; //当加入这行时，内存暴涨
        }
//        NSLog(@&quot;%@&quot;, string);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;nstimer&quot;&gt;NSTimer&lt;/h3&gt;
&lt;p&gt;对于NSTimer，有个我们经常忽略的问题，它会保留其目标对象。如果NSTimer不停重复执行的话，直到开发者稍后手动关闭为止。由于计时器会保留目标对象，如果不手动取消计时器，目标对象是不会释放的，很容易形成“保留环”。&lt;/p&gt;

&lt;p&gt;解决方法：开发者手动关闭计时器。&lt;/p&gt;

&lt;h3 id=&quot;循环引用&quot;&gt;循环引用&lt;/h3&gt;
&lt;p&gt;循环引用，其实就是对象之间互相引用，形成闭环，有点类似互锁。&lt;/p&gt;

&lt;h4 id=&quot;block循环引用&quot;&gt;block循环引用&lt;/h4&gt;
&lt;p&gt;Block循环引用的问题已是老生常谈，Block是将外部对象copy给自己一份，而且只是浅拷贝。在没有加修饰的情况下（__block、__weak），对于OC对象来说，就是引用计数加一，对于基础数据类型（int，float，bool）就是直接copy。
所以当一个对象拥有block，而block又copy了这个对象，就会出现“保留环”&lt;/p&gt;

&lt;p&gt;解决办法：对象前面加加上修饰 “__weak”, 但需要注意的是，block作为回调时，如果多个线程同时操作该对象，__weak对象会在执行到block一半时，可能会被释放，继续执行可能会有问题。所以在block里面第一行，就用“__strong”重新修饰。 示例代码如下（基于RAC框架封装）：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@weakify(self); //相当于 __weak typeof(self) weakself = self;
void ^(block)() = ^{
  @strongify(self); //相当于 __strong typeof(weakself) self = weakself;
};

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;delegate循环引用&quot;&gt;delegate循环引用&lt;/h4&gt;
&lt;p&gt;delegate循环引用问题比较基础，只需注意将代理属性修饰为weak即可&lt;/p&gt;

&lt;h4 id=&quot;如何判断循环引用&quot;&gt;如何判断循环引用&lt;/h4&gt;
&lt;p&gt;简单粗暴实用的方法就是在delloc方法中，加个断点，看是否能正常释放。&lt;/p&gt;

&lt;h3 id=&quot;c语言手动分配空间&quot;&gt;C语言手动分配空间&lt;/h3&gt;
&lt;p&gt;堆空间：与栈不同，是需要开发人员自己管理的内存空间，分配内存空间和释放都需要自己动手。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//分配内存
double *p = (double *)malloc(sizeof(double *));

//释放
free(p);
p = NULL;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;js内存管理javascriptcore&quot;&gt;JS内存管理（JavascriptCore）&lt;/h3&gt;
&lt;p&gt;由于JS内存管理是垃圾回收，并且JS中的对象都是强引用，而OC是引用计数。如果双方互相引用，势必会造成循环引用，而导致内存泄漏。我们用&lt;strong&gt;JSManagedValue&lt;/strong&gt;保存JSValue来避免&lt;/p&gt;

&lt;h3 id=&quot;野指针&quot;&gt;野指针&lt;/h3&gt;
&lt;p&gt;当我们使用assign修饰一个属性变量时，它的赋值是不会改变引用计数，与weak相同，但是与weak也有一个差别，当这个变量指向对象的计数为0，被清除时，weak修饰的指针值会置空，assign修饰的不会，指向一片未知区域，成为一个“野指针”，如果运气好，指向地址的内存数据没被清，app还可以跑，否则就会carsh.&lt;/p&gt;

&lt;p&gt;解决办法：修饰OC对象时，请避免使用“assign”，有weak替代。
ps：ios中UITableView中delegate以前的版本就是assign，在特定的情况下引发carsh。后面应该是苹果发现了，统一改成weak。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;people&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;man&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;cfctcg对象&quot;&gt;CF、CT、CG对象&lt;/h3&gt;
&lt;p&gt;使用过iOS底层框架时，常常会看到带有含create创建方法，创建CF、CG对象，这些就需要我们手动释放内存，如果没有手动释放，可以通过leak内存检测工具查出来。示例代码：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CGImageRef imageRef = CGImageCreateWithImageInRect(imageRef, myImageRect); //创建
CGImageRelease(imageRef); //释放

CTFontRef ctFont = CTFontCreateWithName((__bridge CFStringRef) self.font.fontName, self.font.pointSize, NULL);
CFRelease(ctFont);

CGMutablePathRef trackPath = CGPathCreateMutable();
CGPathRelease(trackPath);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 16 May 2017 01:29:43 +0800</pubDate>
        <link>http://localhost:4000/2017/05/ios-memory/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/ios-memory/</guid>
        
        <category>iOS</category>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Test</title>
        <description>&lt;h3 id=&quot;for-test&quot;&gt;For Test&lt;/h3&gt;
&lt;p&gt;Hello world, this word is for testing.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@widget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;respond_to&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# show.html.erb&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;json: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@widget&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Sun, 14 May 2017 12:19:43 +0800</pubDate>
        <link>http://localhost:4000/2017/05/test/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/test/</guid>
        
        <category>Testtag</category>
        
        
        <category>红袖添香</category>
        
      </item>
    
      <item>
        <title>动态规划（DP)</title>
        <description>&lt;h3 id=&quot;基本概念&quot;&gt;基本概念&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;动态规划&lt;/strong&gt;：每次决策依赖于当前状态，又随即引起状态的状态转移，一个决策序列就是在变化的状态中产生出来的，这样&lt;strong&gt;多阶段&lt;/strong&gt;最优化决策解决问题的过程。&lt;/p&gt;

&lt;h3 id=&quot;基本思想与策略&quot;&gt;基本思想与策略&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;基本思路&lt;/strong&gt;：将待求解的问题分成若干个子问题（阶段），按顺序求解子阶段，前一子问题的解，为后一子问题的求解提供了有用的信息。在求解任一子问题时，列出各种可能的局部解，通过决策保留那些有可能达到最优的局部解，丢弃其他局部解。依次解决各个子问题，最后一个子问题就是初始问题的解。&lt;/p&gt;

&lt;p&gt;由于动态规划解决问题多数有重叠子问题这个特点，为了减少重复计算，对每个子问题只解一次，将其不同的阶段的不同状态保存在一个二维数组中。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ps:不管该子问题以后是否被用到，只要它被计算过，就将其结果填入表中。这就是动态规划法的基本思路。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;适用的情况&quot;&gt;适用的情况&lt;/h3&gt;

&lt;p&gt;能采用动态规划求解的问题的一般要具有3个性质：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;最优化原理&lt;/strong&gt;：如果问题的最优解所包含的子问题的解也是最优的，就称该问题具有最优子结构，即满足最优化原理。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;无后效性&lt;/strong&gt;：即某阶段状态一旦确定，就不受这个状态以后决策的影响。也就是说，某状态以后的过程不会影响以前的状态，只与当前状态有关。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;有重叠子问题&lt;/strong&gt;：即子问题之间是不独立的，一个子问题在下一阶段决策中可能被多次使用到。（该性质并不是动态规划适用的必要条件，但是如果没有这条性质，动态规划算法同其他算法相比就不具备优势）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;求解的基本步骤&quot;&gt;求解的基本步骤&lt;/h3&gt;

&lt;p&gt;动态规划所处理的问题是一个多阶段决策问题，一般由初始状态开始，通过对中间阶段决策的选择，达到结束状态。这些决策形成了一个决策序列，同时确定了完成整个过程的一条活动路线(通常是求最优的活动路线)。如下所示。动态规划的设计都有着一定的模式，一般要经历以下几个步骤。 &lt;br /&gt;
    初始状态→│决策１│→│决策２│→…→│决策ｎ│→结束状态&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;划分阶段&lt;/strong&gt;：按照问题的时间或空间特征，把问题分为若干个阶段。注意&lt;strong&gt;划分后的阶段一定要是有序的或者是可排序的&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;确定状态和状态变量&lt;/strong&gt;：将问题发展到各个阶段时所处于的各种客观情况用不同的状态表示出来。当然，状态的选择要满足无后效性。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;确定决策并写出转态转移方程&lt;/strong&gt;：因为决策和转态转移有着天然的联系，&lt;strong&gt;状态转移就是根据上一阶段的转态和决策来导出本阶段的转态&lt;/strong&gt;。所以如果确定了决策，转态转移方程也就可以写出来。但事实上常常是反过来做，&lt;strong&gt;根据相邻两个阶段的转态之间的关系来确定决策方法和转态转移方程&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;寻址边界条件&lt;/strong&gt;：给出的状态转移方程是一个递推式，需要一个递推的终止条件或边界条件。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一般，只要解决问题的阶段、状态和状态转移决策确定了，就可以写出状态转移方程。
实际应用中可以按以下几个简化的步骤进行设计：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;（1）分析最优解的性质，并刻画其结构特征。
（2）递归的定义最优解。
（3）以自底向上或自顶向下的记忆化方式（备忘录法）计算出最优值
（4）根据计算最优值时得到的信息，构造问题的最优解
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;算法实现的说明&quot;&gt;算法实现的说明&lt;/h3&gt;

</description>
        <pubDate>Wed, 10 May 2017 15:32:24 +0800</pubDate>
        <link>http://localhost:4000/2017/05/dp-base/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/dp-base/</guid>
        
        
      </item>
    
      <item>
        <title>iOS viewcontroller</title>
        <description>&lt;p&gt;许久没有看过viewcontroller，由于项目原因，重新温习了下，现在整理下&lt;/p&gt;

&lt;h3 id=&quot;生命周期&quot;&gt;生命周期&lt;/h3&gt;

&lt;p&gt;启动到显示&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;init&lt;/li&gt;
  &lt;li&gt;willMoveToParentViewController&lt;/li&gt;
  &lt;li&gt;loadView&lt;/li&gt;
  &lt;li&gt;viewDidLoad&lt;/li&gt;
  &lt;li&gt;viewWillAppear&lt;/li&gt;
  &lt;li&gt;updateViewConstraints&lt;/li&gt;
  &lt;li&gt;viewWillLayoutSubviews&lt;/li&gt;
  &lt;li&gt;viewDidLayoutSubviews&lt;/li&gt;
  &lt;li&gt;viewDidAppear&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;退出到销毁&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;didMoveToParentViewController&lt;/li&gt;
  &lt;li&gt;viewWillDisappear&lt;/li&gt;
  &lt;li&gt;viewDidDisappear&lt;/li&gt;
  &lt;li&gt;dealloc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;作为子控制，加入到父控制器上，分三步，周期如下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;OneViewController *one = [[OneViewController alloc] init];
* init

[self addChildViewController:vc];
* willMoveToParentViewController
* loadView
* viewDidLoad

[self.view addSubview:vc.view];
* viewWillAppear
* updateViewConstraints
* viewWillLayoutSubviews
* viewDidLayoutSubviews
* viewDidAppear

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;响应链&quot;&gt;响应链&lt;/h3&gt;

&lt;p&gt;//是否响应该手势，但只要手势开始调用，用于确定响应的view，与GestureRecongizer一样&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;hitTest:withEvent&lt;/li&gt;
  &lt;li&gt;pointInside:withEvent&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 16 Apr 2017 18:32:24 +0800</pubDate>
        <link>http://localhost:4000/2017/04/iOS-viewController/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/iOS-viewController/</guid>
        
        
      </item>
    
  </channel>
</rss>
